// Generated by gencpp from file neo_msgs/RadarBoard.msg
// DO NOT EDIT!


#ifndef NEO_MSGS_MESSAGE_RADARBOARD_H
#define NEO_MSGS_MESSAGE_RADARBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neo_msgs
{
template <class ContainerAllocator>
struct RadarBoard_
{
  typedef RadarBoard_<ContainerAllocator> Type;

  RadarBoard_()
    : velocity()
    , state(0)  {
      velocity.assign(0.0);
  }
  RadarBoard_(const ContainerAllocator& _alloc)
    : velocity()
    , state(0)  {
  (void)_alloc;
      velocity.assign(0.0);
  }



   typedef boost::array<double, 3>  _velocity_type;
  _velocity_type velocity;

   typedef int32_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::neo_msgs::RadarBoard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neo_msgs::RadarBoard_<ContainerAllocator> const> ConstPtr;

}; // struct RadarBoard_

typedef ::neo_msgs::RadarBoard_<std::allocator<void> > RadarBoard;

typedef boost::shared_ptr< ::neo_msgs::RadarBoard > RadarBoardPtr;
typedef boost::shared_ptr< ::neo_msgs::RadarBoard const> RadarBoardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neo_msgs::RadarBoard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neo_msgs::RadarBoard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neo_msgs::RadarBoard_<ContainerAllocator1> & lhs, const ::neo_msgs::RadarBoard_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neo_msgs::RadarBoard_<ContainerAllocator1> & lhs, const ::neo_msgs::RadarBoard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::RadarBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::RadarBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::RadarBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::RadarBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::RadarBoard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::RadarBoard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neo_msgs::RadarBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a5dbee0d40bb12d02b78bf551ec141d";
  }

  static const char* value(const ::neo_msgs::RadarBoard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a5dbee0d40bb12dULL;
  static const uint64_t static_value2 = 0x02b78bf551ec141dULL;
};

template<class ContainerAllocator>
struct DataType< ::neo_msgs::RadarBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neo_msgs/RadarBoard";
  }

  static const char* value(const ::neo_msgs::RadarBoard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neo_msgs::RadarBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] velocity\n"
"int32 state\n"
;
  }

  static const char* value(const ::neo_msgs::RadarBoard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neo_msgs::RadarBoard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarBoard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neo_msgs::RadarBoard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neo_msgs::RadarBoard_<ContainerAllocator>& v)
  {
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEO_MSGS_MESSAGE_RADARBOARD_H
