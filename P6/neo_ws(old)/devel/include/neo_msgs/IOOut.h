// Generated by gencpp from file neo_msgs/IOOut.msg
// DO NOT EDIT!


#ifndef NEO_MSGS_MESSAGE_IOOUT_H
#define NEO_MSGS_MESSAGE_IOOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neo_msgs
{
template <class ContainerAllocator>
struct IOOut_
{
  typedef IOOut_<ContainerAllocator> Type;

  IOOut_()
    : channel(0)
    , active(false)  {
    }
  IOOut_(const ContainerAllocator& _alloc)
    : channel(0)
    , active(false)  {
  (void)_alloc;
    }



   typedef int16_t _channel_type;
  _channel_type channel;

   typedef uint8_t _active_type;
  _active_type active;





  typedef boost::shared_ptr< ::neo_msgs::IOOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neo_msgs::IOOut_<ContainerAllocator> const> ConstPtr;

}; // struct IOOut_

typedef ::neo_msgs::IOOut_<std::allocator<void> > IOOut;

typedef boost::shared_ptr< ::neo_msgs::IOOut > IOOutPtr;
typedef boost::shared_ptr< ::neo_msgs::IOOut const> IOOutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neo_msgs::IOOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neo_msgs::IOOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neo_msgs::IOOut_<ContainerAllocator1> & lhs, const ::neo_msgs::IOOut_<ContainerAllocator2> & rhs)
{
  return lhs.channel == rhs.channel &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neo_msgs::IOOut_<ContainerAllocator1> & lhs, const ::neo_msgs::IOOut_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::IOOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::IOOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::IOOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::IOOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::IOOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::IOOut_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neo_msgs::IOOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "894ccc9cba8043db3f885fa5ca0edd62";
  }

  static const char* value(const ::neo_msgs::IOOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x894ccc9cba8043dbULL;
  static const uint64_t static_value2 = 0x3f885fa5ca0edd62ULL;
};

template<class ContainerAllocator>
struct DataType< ::neo_msgs::IOOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neo_msgs/IOOut";
  }

  static const char* value(const ::neo_msgs::IOOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neo_msgs::IOOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 channel\n"
"bool active\n"
;
  }

  static const char* value(const ::neo_msgs::IOOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neo_msgs::IOOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neo_msgs::IOOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neo_msgs::IOOut_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.channel);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEO_MSGS_MESSAGE_IOOUT_H
