# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~allow_init_with_backwards_motion
4.default= False
4.type= bool
4.desc=If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors) 
5.name= ~max_global_plan_lookahead_dist
5.default= 3.0
5.type= double
5.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
6.name= ~force_reinit_new_goal_dist
6.default= 1.0
6.type= double
6.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
7.name= ~force_reinit_new_goal_angular
7.default= 0.78
7.type= double
7.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting) Range: 0.0 to 4.0
8.name= ~feasibility_check_no_poses
8.default= 5
8.type= int
8.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
9.name= ~exact_arc_length
9.default= False
9.type= bool
9.desc=If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used. 
10.name= ~publish_feedback
10.default= False
10.type= bool
10.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
11.name= ~visualize_with_time_as_z_axis_scale
11.default= 0.0
11.type= double
11.desc=If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles. Range: 0.0 to 1.0
12.name= ~global_plan_viapoint_sep
12.default= -0.1
12.type= double
12.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
13.name= ~via_points_ordered
13.default= False
13.type= bool
13.desc=If true, the planner adheres to the order of via-points in the storage container 
14.name= ~max_vel_x
14.default= 0.4
14.type= double
14.desc=Maximum translational velocity of the robot Range: 0.01 to 100.0
15.name= ~max_vel_x_backwards
15.default= 0.2
15.type= double
15.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 100.0
16.name= ~max_vel_theta
16.default= 0.3
16.type= double
16.desc=Maximum angular velocity of the robot Range: 0.01 to 100.0
17.name= ~acc_lim_x
17.default= 0.5
17.type= double
17.desc=Maximum translational acceleration of the robot Range: 0.01 to 100.0
18.name= ~acc_lim_theta
18.default= 0.5
18.type= double
18.desc=Maximum angular acceleration of the robot Range: 0.01 to 100.0
19.name= ~is_footprint_dynamic
19.default= False
19.type= bool
19.desc=If true, updated the footprint before checking trajectory feasibility 
20.name= ~min_turning_radius
20.default= 0.0
20.type= double
20.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 50.0
21.name= ~wheelbase
21.default= 1.0
21.type= double
21.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -10.0 to 10.0
22.name= ~cmd_angle_instead_rotvel
22.default= False
22.type= bool
22.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
23.name= ~max_vel_y
23.default= 0.0
23.type= double
23.desc=Maximum strafing velocity of the robot (should be zero for non-holonomic robots!) Range: 0.0 to 100.0
24.name= ~acc_lim_y
24.default= 0.5
24.type= double
24.desc=Maximum strafing acceleration of the robot Range: 0.01 to 100.0
25.name= ~xy_goal_tolerance
25.default= 0.2
25.type= double
25.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
26.name= ~yaw_goal_tolerance
26.default= 0.1
26.type= double
26.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
27.name= ~free_goal_vel
27.default= False
27.type= bool
27.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
28.name= ~min_obstacle_dist
28.default= 0.5
28.type= double
28.desc=Minimum desired separation from obstacles Range: 0.0 to 10.0
29.name= ~inflation_dist
29.default= 0.6
29.type= double
29.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
30.name= ~dynamic_obstacle_inflation_dist
30.default= 0.6
30.type= double
30.desc=Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
31.name= ~include_dynamic_obstacles
31.default= False
31.type= bool
31.desc=Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static. 
32.name= ~include_costmap_obstacles
32.default= True
32.type= bool
32.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
33.name= ~legacy_obstacle_association
33.default= False
33.type= bool
33.desc=If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles). 
34.name= ~obstacle_association_force_inclusion_factor
34.default= 1.5
34.type= double
34.desc=The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist. Range: 0.0 to 100.0
35.name= ~obstacle_association_cutoff_factor
35.default= 5.0
35.type= double
35.desc=See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first. Range: 1.0 to 100.0
36.name= ~costmap_obstacles_behind_robot_dist
36.default= 1.5
36.type= double
36.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
37.name= ~obstacle_poses_affected
37.default= 30
37.type= int
37.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
38.name= ~no_inner_iterations
38.default= 5
38.type= int
38.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
39.name= ~no_outer_iterations
39.default= 4
39.type= int
39.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
40.name= ~optimization_activate
40.default= True
40.type= bool
40.desc=Activate the optimization 
41.name= ~optimization_verbose
41.default= False
41.type= bool
41.desc=Print verbose information 
42.name= ~penalty_epsilon
42.default= 0.1
42.type= double
42.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 1.0
43.name= ~weight_max_vel_x
43.default= 2.0
43.type= double
43.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 0.0 to 1000.0
44.name= ~weight_max_vel_y
44.default= 2.0
44.type= double
44.desc=Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots) Range: 0.0 to 1000.0
45.name= ~weight_max_vel_theta
45.default= 1.0
45.type= double
45.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 0.0 to 1000.0
46.name= ~weight_acc_lim_x
46.default= 1.0
46.type= double
46.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 0.0 to 1000.0
47.name= ~weight_acc_lim_y
47.default= 1.0
47.type= double
47.desc=Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots) Range: 0.0 to 1000.0
48.name= ~weight_acc_lim_theta
48.default= 1.0
48.type= double
48.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 0.0 to 1000.0
49.name= ~weight_kinematics_nh
49.default= 1000.0
49.type= double
49.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
50.name= ~weight_kinematics_forward_drive
50.default= 1.0
50.type= double
50.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
51.name= ~weight_kinematics_turning_radius
51.default= 1.0
51.type= double
51.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
52.name= ~weight_optimaltime
52.default= 1.0
52.type= double
52.desc=Optimization weight for contracting the trajectory w.r.t. transition time Range: 0.0 to 1000.0
53.name= ~weight_shortest_path
53.default= 0.0
53.type= double
53.desc=Optimization weight for contracting the trajectory w.r.t. path length Range: 0.0 to 100.0
54.name= ~weight_obstacle
54.default= 50.0
54.type= double
54.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
55.name= ~weight_inflation
55.default= 0.1
55.type= double
55.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
56.name= ~weight_dynamic_obstacle
56.default= 50.0
56.type= double
56.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
57.name= ~weight_dynamic_obstacle_inflation
57.default= 0.1
57.type= double
57.desc=Optimization weight for the inflation penalty of dynamic obstacles (should be small) Range: 0.0 to 10.0
58.name= ~weight_viapoint
58.default= 1.0
58.type= double
58.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
59.name= ~weight_adapt_factor
59.default= 2.0
59.type= double
59.desc=Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem. Range: 1.0 to 100.0
60.name= ~obstacle_cost_exponent
60.default= 1.0
60.type= double
60.desc=Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default) Range: 0.01 to 100.0
61.name= ~enable_multithreading
61.default= True
61.type= bool
61.desc=Activate multiple threading for planning multiple trajectories in parallel 
62.name= ~max_number_classes
62.default= 5
62.type= int
62.desc=Specify the maximum number of allowed alternative homotopy classes (limits computational effort) Range: 1 to 100
63.name= ~selection_cost_hysteresis
63.default= 1.0
63.type= double
63.desc=Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor) Range: 0.0 to 2.0
64.name= ~selection_prefer_initial_plan
64.default= 0.95
64.type= double
64.desc=Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.) Range: 0.0 to 1.0
65.name= ~selection_obst_cost_scale
65.default= 2.0
65.type= double
65.desc=Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor) Range: 0.0 to 1000.0
66.name= ~selection_viapoint_cost_scale
66.default= 1.0
66.type= double
66.desc=Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor) Range: 0.0 to 100.0
67.name= ~selection_alternative_time_cost
67.default= False
67.type= bool
67.desc=If true, time cost is replaced by the total transition time. 
68.name= ~switching_blocking_period
68.default= 0.0
68.type= double
68.desc=Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed Range: 0.0 to 60.0
69.name= ~roadmap_graph_no_samples
69.default= 15
69.type= int
69.desc=Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off Range: 1 to 100
70.name= ~roadmap_graph_area_width
70.default= 5.0
70.type= double
70.desc=Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance) Range: 0.1 to 20.0
71.name= ~roadmap_graph_area_length_scale
71.default= 1.0
71.type= double
71.desc=The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!) Range: 0.5 to 2.0
72.name= ~h_signature_prescaler
72.default= 1.0
72.type= double
72.desc=Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1) Range: 0.2 to 1.0
73.name= ~h_signature_threshold
73.default= 0.1
73.type= double
73.desc=Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold Range: 0.0 to 1.0
74.name= ~obstacle_heading_threshold
74.default= 0.45
74.type= double
74.desc=Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration) Range: 0.0 to 1.0
75.name= ~viapoints_all_candidates
75.default= True
75.type= bool
75.desc=If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node). 
76.name= ~visualize_hc_graph
76.default= False
76.type= bool
76.desc=Visualize the graph that is created for exploring new homotopy classes 
77.name= ~shrink_horizon_backup
77.default= True
77.type= bool
77.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
78.name= ~oscillation_recovery
78.default= True
78.type= bool
78.desc=Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards). 
}
}
# End of autogenerated section. You may edit below.
