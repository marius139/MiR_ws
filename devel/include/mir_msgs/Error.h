// Generated by gencpp from file mir_msgs/Error.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_ERROR_H
#define MIR_MSGS_MESSAGE_ERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct Error_
{
  typedef Error_<ContainerAllocator> Type;

  Error_()
    : timestamp()
    , code(0)
    , description()
    , module()  {
    }
  Error_(const ContainerAllocator& _alloc)
    : timestamp()
    , code(0)
    , description(_alloc)
    , module(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_type;
  _module_type module;



  enum {
    HARDWARE_ERROR = 0,
    CPU_LOAD_ERROR = 100,
    MEMORY_ERROR = 200,
    ETHERNET_ERROR = 300,
    HDD_ERROR = 400,
    BATTERY_ERROR = 500,
    IMU_ERROR = 600,
    MOTOR_ERROR = 700,
    LASER_ERROR = 800,
    CAMERA_ERROR = 900,
    SAFETY_SYSTEM_ERROR = 1000,
    HOOK_ERROR = 5000,
    HOOK_CAMERA_ERROR = 5100,
    HOOK_ACTUATOR_ERROR = 5200,
    HOOK_BRAKE_ERROR = 5300,
    HOOK_ENCODER_ERROR = 5400,
    MISSING_ERROR = 9000,
    SOFTWARE_ERROR = 10000,
    MISSION_ERROR = 10100,
    LOCALIZATION_ERROR = 10200,
    MAPPING_ERROR = 10300,
    ODOM_FUSION_ERROR = 10400,
  };


  typedef boost::shared_ptr< ::mir_msgs::Error_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::Error_<ContainerAllocator> const> ConstPtr;

}; // struct Error_

typedef ::mir_msgs::Error_<std::allocator<void> > Error;

typedef boost::shared_ptr< ::mir_msgs::Error > ErrorPtr;
typedef boost::shared_ptr< ::mir_msgs::Error const> ErrorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::Error_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::Error_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mir_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mir_msgs': ['/home/ros/MiR_ws/src/mir_robot/mir_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Error_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Error_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Error_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Error_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5386c06f8c9eb4ee65da90d23441ab00";
  }

  static const char* value(const ::mir_msgs::Error_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5386c06f8c9eb4eeULL;
  static const uint64_t static_value2 = 0x65da90d23441ab00ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/Error";
  }

  static const char* value(const ::mir_msgs::Error_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of offsets indicating what type an error is\n\
int32 HARDWARE_ERROR = 0\n\
int32 CPU_LOAD_ERROR = 100\n\
int32 MEMORY_ERROR = 200\n\
int32 ETHERNET_ERROR = 300\n\
int32 HDD_ERROR = 400\n\
int32 BATTERY_ERROR = 500\n\
int32 IMU_ERROR = 600\n\
int32 MOTOR_ERROR = 700\n\
int32 LASER_ERROR = 800\n\
int32 CAMERA_ERROR = 900\n\
int32 SAFETY_SYSTEM_ERROR = 1000\n\
int32 HOOK_ERROR = 5000\n\
int32 HOOK_CAMERA_ERROR = 5100\n\
int32 HOOK_ACTUATOR_ERROR = 5200\n\
int32 HOOK_BRAKE_ERROR = 5300\n\
int32 HOOK_ENCODER_ERROR = 5400\n\
int32 MISSING_ERROR = 9000\n\
int32 SOFTWARE_ERROR = 10000\n\
int32 MISSION_ERROR = 10100\n\
int32 LOCALIZATION_ERROR = 10200\n\
int32 MAPPING_ERROR = 10300\n\
int32 ODOM_FUSION_ERROR = 10400\n\
\n\
\n\
time timestamp		# Timestamp for when the error occurred\n\
int32 code 			# Error code\n\
string description 	# Error description\n\
string module		# Module in which the error occurred\n\
";
  }

  static const char* value(const ::mir_msgs::Error_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::Error_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.code);
      stream.next(m.description);
      stream.next(m.module);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Error_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::Error_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::Error_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "module: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_ERROR_H
