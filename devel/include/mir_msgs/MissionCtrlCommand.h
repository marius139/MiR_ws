// Generated by gencpp from file mir_msgs/MissionCtrlCommand.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_MISSIONCTRLCOMMAND_H
#define MIR_MSGS_MESSAGE_MISSIONCTRLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct MissionCtrlCommand_
{
  typedef MissionCtrlCommand_<ContainerAllocator> Type;

  MissionCtrlCommand_()
    : description()
    , cmd(0)
    , mission_id(0)  {
    }
  MissionCtrlCommand_(const ContainerAllocator& _alloc)
    : description(_alloc)
    , cmd(0)
    , mission_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef int32_t _mission_id_type;
  _mission_id_type mission_id;



  enum {
    CMD_GET_STATUS = 0u,
    CMD_WAIT_POS_LOCK = 1u,
    CMD_WAIT_AREA_LOCK = 2u,
    CMD_CONTINUE = 3u,
    CMD_LOAD_MISSION = 4u,
  };


  typedef boost::shared_ptr< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MissionCtrlCommand_

typedef ::mir_msgs::MissionCtrlCommand_<std::allocator<void> > MissionCtrlCommand;

typedef boost::shared_ptr< ::mir_msgs::MissionCtrlCommand > MissionCtrlCommandPtr;
typedef boost::shared_ptr< ::mir_msgs::MissionCtrlCommand const> MissionCtrlCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mir_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mir_msgs': ['/home/ros/MiR_ws/src/mir_robot/mir_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea52ad5a8cbcac0a68f542bb228ca82d";
  }

  static const char* value(const ::mir_msgs::MissionCtrlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea52ad5a8cbcac0aULL;
  static const uint64_t static_value2 = 0x68f542bb228ca82dULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/MissionCtrlCommand";
  }

  static const char* value(const ::mir_msgs::MissionCtrlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CMD_GET_STATUS = 0\n\
uint8 CMD_WAIT_POS_LOCK = 1\n\
uint8 CMD_WAIT_AREA_LOCK = 2\n\
uint8 CMD_CONTINUE = 3\n\
uint8 CMD_LOAD_MISSION = 4\n\
\n\
string description\n\
int32 cmd\n\
int32 mission_id\n\
";
  }

  static const char* value(const ::mir_msgs::MissionCtrlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.description);
      stream.next(m.cmd);
      stream.next(m.mission_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionCtrlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::MissionCtrlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::MissionCtrlCommand_<ContainerAllocator>& v)
  {
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "mission_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_MISSIONCTRLCOMMAND_H
