// Generated by gencpp from file mir_msgs/MirStatus.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_MIRSTATUS_H
#define MIR_MSGS_MESSAGE_MIRSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct MirStatus_
{
  typedef MirStatus_<ContainerAllocator> Type;

  MirStatus_()
    : state(0)
    , mode()
    , msg()
    , uptime(0.0)
    , moved(0.0)
    , battery(0.0)
    , battery_percentage(0.0)
    , battery_time_left(0)
    , eta(0.0)  {
    }
  MirStatus_(const ContainerAllocator& _alloc)
    : state(0)
    , mode(_alloc)
    , msg(_alloc)
    , uptime(0.0)
    , moved(0.0)
    , battery(0.0)
    , battery_percentage(0.0)
    , battery_time_left(0)
    , eta(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;

   typedef float _uptime_type;
  _uptime_type uptime;

   typedef float _moved_type;
  _moved_type moved;

   typedef float _battery_type;
  _battery_type battery;

   typedef float _battery_percentage_type;
  _battery_percentage_type battery_percentage;

   typedef int32_t _battery_time_left_type;
  _battery_time_left_type battery_time_left;

   typedef float _eta_type;
  _eta_type eta;





  typedef boost::shared_ptr< ::mir_msgs::MirStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::MirStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MirStatus_

typedef ::mir_msgs::MirStatus_<std::allocator<void> > MirStatus;

typedef boost::shared_ptr< ::mir_msgs::MirStatus > MirStatusPtr;
typedef boost::shared_ptr< ::mir_msgs::MirStatus const> MirStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::MirStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::MirStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mir_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mir_msgs': ['/home/ros/MiR_ws/src/mir_robot/mir_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MirStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MirStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MirStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MirStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MirStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MirStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::MirStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67e1f2c3710bfe1130e859b6c4f4e0c2";
  }

  static const char* value(const ::mir_msgs::MirStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67e1f2c3710bfe11ULL;
  static const uint64_t static_value2 = 0x30e859b6c4f4e0c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::MirStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/MirStatus";
  }

  static const char* value(const ::mir_msgs::MirStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::MirStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MirStatus - to publish data on a topic\n\
int32  state    			# system state\n\
string  mode    			# overall operation of the robot\n\
string  msg     			# status message\n\
float32 uptime  			# time since start in min\n\
float32 moved   			# combined distance moved since last start\n\
float32 battery 			# voltage of battery\n\
float32 battery_percentage 		# battery left in percent\n\
int32 battery_time_left 		# battery time left in seconds\n\
float32 eta     			# estimated time of arrival (not impl)\n\
";
  }

  static const char* value(const ::mir_msgs::MirStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::MirStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.msg);
      stream.next(m.uptime);
      stream.next(m.moved);
      stream.next(m.battery);
      stream.next(m.battery_percentage);
      stream.next(m.battery_time_left);
      stream.next(m.eta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MirStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::MirStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::MirStatus_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
    s << indent << "uptime: ";
    Printer<float>::stream(s, indent + "  ", v.uptime);
    s << indent << "moved: ";
    Printer<float>::stream(s, indent + "  ", v.moved);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "battery_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_percentage);
    s << indent << "battery_time_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_time_left);
    s << indent << "eta: ";
    Printer<float>::stream(s, indent + "  ", v.eta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_MIRSTATUS_H
