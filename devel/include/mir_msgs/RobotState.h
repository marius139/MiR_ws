// Generated by gencpp from file mir_msgs/RobotState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_ROBOTSTATE_H
#define MIR_MSGS_MESSAGE_ROBOTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct RobotState_
{
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
    : robotState(0)
    , robotStateString()  {
    }
  RobotState_(const ContainerAllocator& _alloc)
    : robotState(0)
    , robotStateString(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _robotState_type;
  _robotState_type robotState;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotStateString_type;
  _robotStateString_type robotStateString;



  enum {
    ROBOT_STATE_NONE = 0u,
    ROBOT_STATE_STARTING = 1u,
    ROBOT_STATE_SHUTTINGDOWN = 2u,
    ROBOT_STATE_READY = 3u,
    ROBOT_STATE_PAUSE = 4u,
    ROBOT_STATE_EXECUTING = 5u,
    ROBOT_STATE_ABORTED = 6u,
    ROBOT_STATE_COMPLETED = 7u,
    ROBOT_STATE_DOCKED = 8u,
    ROBOT_STATE_DOCKING = 9u,
    ROBOT_STATE_EMERGENCYSTOP = 10u,
    ROBOT_STATE_MANUALCONTROL = 11u,
    ROBOT_STATE_ERROR = 12u,
  };


  typedef boost::shared_ptr< ::mir_msgs::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::RobotState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotState_

typedef ::mir_msgs::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::mir_msgs::RobotState > RobotStatePtr;
typedef boost::shared_ptr< ::mir_msgs::RobotState const> RobotStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::RobotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::RobotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mir_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mir_msgs': ['/home/ros/MiR_ws/src/mir_robot/mir_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9944ef1184bc5d5298157a9fe91aa4e";
  }

  static const char* value(const ::mir_msgs::RobotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9944ef1184bc5d5ULL;
  static const uint64_t static_value2 = 0x298157a9fe91aa4eULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/RobotState";
  }

  static const char* value(const ::mir_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The robot has to be in a predefined state \n\
uint8 ROBOT_STATE_NONE = 0\n\
uint8 ROBOT_STATE_STARTING = 1\n\
uint8 ROBOT_STATE_SHUTTINGDOWN = 2\n\
uint8 ROBOT_STATE_READY = 3		# ready to execute\n\
uint8 ROBOT_STATE_PAUSE = 4		# pause from executing\n\
uint8 ROBOT_STATE_EXECUTING = 5		# when running in mission/taxa/bus\n\
uint8 ROBOT_STATE_ABORTED = 6	\n\
uint8 ROBOT_STATE_COMPLETED = 7		# done executing\n\
uint8 ROBOT_STATE_DOCKED = 8		# in the dock and charging the batteries\n\
uint8 ROBOT_STATE_DOCKING = 9\n\
uint8 ROBOT_STATE_EMERGENCYSTOP = 10	# the robot has emg-stop activated\n\
uint8 ROBOT_STATE_MANUALCONTROL = 11	# a pause state, where the robot can move\n\
uint8 ROBOT_STATE_ERROR = 12		# a general error state, requires a error handle\n\
\n\
uint8 robotState\n\
string robotStateString\n\
\n\
";
  }

  static const char* value(const ::mir_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::RobotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotState);
      stream.next(m.robotStateString);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::RobotState_<ContainerAllocator>& v)
  {
    s << indent << "robotState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robotState);
    s << indent << "robotStateString: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robotStateString);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_ROBOTSTATE_H
