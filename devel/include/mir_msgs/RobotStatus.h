// Generated by gencpp from file mir_msgs/RobotStatus.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_ROBOTSTATUS_H
#define MIR_MSGS_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mir_msgs/Error.h>
#include <mir_msgs/HookStatus.h>
#include <mir_msgs/Pose2D.h>
#include <mir_msgs/Twist2D.h>
#include <mir_msgs/UserPrompt.h>

namespace mir_msgs
{
template <class ContainerAllocator>
struct RobotStatus_
{
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
    : battery_percentage(0.0)
    , battery_time_remaining(0)
    , battery_voltage(0.0)
    , distance_to_next_target(0.0)
    , errors()
    , footprint()
    , hook_status()
    , map_id()
    , unloaded_map_changes(false)
    , mission_queue_id(0)
    , mission_text()
    , mode_id(0)
    , mode_text()
    , moved(0.0)
    , position()
    , robot_name()
    , session_id()
    , software_version()
    , state_id(0)
    , state_text()
    , uptime(0)
    , velocity()
    , user_prompt()  {
    }
  RobotStatus_(const ContainerAllocator& _alloc)
    : battery_percentage(0.0)
    , battery_time_remaining(0)
    , battery_voltage(0.0)
    , distance_to_next_target(0.0)
    , errors(_alloc)
    , footprint(_alloc)
    , hook_status(_alloc)
    , map_id(_alloc)
    , unloaded_map_changes(false)
    , mission_queue_id(0)
    , mission_text(_alloc)
    , mode_id(0)
    , mode_text(_alloc)
    , moved(0.0)
    , position(_alloc)
    , robot_name(_alloc)
    , session_id(_alloc)
    , software_version(_alloc)
    , state_id(0)
    , state_text(_alloc)
    , uptime(0)
    , velocity(_alloc)
    , user_prompt(_alloc)  {
  (void)_alloc;
    }



   typedef float _battery_percentage_type;
  _battery_percentage_type battery_percentage;

   typedef int32_t _battery_time_remaining_type;
  _battery_time_remaining_type battery_time_remaining;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef float _distance_to_next_target_type;
  _distance_to_next_target_type distance_to_next_target;

   typedef std::vector< ::mir_msgs::Error_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mir_msgs::Error_<ContainerAllocator> >::other >  _errors_type;
  _errors_type errors;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _footprint_type;
  _footprint_type footprint;

   typedef  ::mir_msgs::HookStatus_<ContainerAllocator>  _hook_status_type;
  _hook_status_type hook_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_id_type;
  _map_id_type map_id;

   typedef uint8_t _unloaded_map_changes_type;
  _unloaded_map_changes_type unloaded_map_changes;

   typedef int32_t _mission_queue_id_type;
  _mission_queue_id_type mission_queue_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_text_type;
  _mission_text_type mission_text;

   typedef int32_t _mode_id_type;
  _mode_id_type mode_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_text_type;
  _mode_text_type mode_text;

   typedef double _moved_type;
  _moved_type moved;

   typedef  ::mir_msgs::Pose2D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _session_id_type;
  _session_id_type session_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _software_version_type;
  _software_version_type software_version;

   typedef uint8_t _state_id_type;
  _state_id_type state_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_text_type;
  _state_text_type state_text;

   typedef int32_t _uptime_type;
  _uptime_type uptime;

   typedef  ::mir_msgs::Twist2D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::mir_msgs::UserPrompt_<ContainerAllocator>  _user_prompt_type;
  _user_prompt_type user_prompt;





  typedef boost::shared_ptr< ::mir_msgs::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::RobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatus_

typedef ::mir_msgs::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::mir_msgs::RobotStatus > RobotStatusPtr;
typedef boost::shared_ptr< ::mir_msgs::RobotStatus const> RobotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::RobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mir_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mir_msgs': ['/home/ros/MiR_ws/src/mir_robot/mir_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18d07d8b4603caa865c6e7d49636c2d6";
  }

  static const char* value(const ::mir_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18d07d8b4603caa8ULL;
  static const uint64_t static_value2 = 0x65c6e7d49636c2d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/RobotStatus";
  }

  static const char* value(const ::mir_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 battery_percentage\n\
int32 battery_time_remaining\n\
float32 battery_voltage\n\
float32 distance_to_next_target\n\
Error[] errors\n\
string footprint\n\
HookStatus hook_status\n\
string map_id\n\
bool unloaded_map_changes\n\
int32 mission_queue_id\n\
string mission_text\n\
int32 mode_id\n\
string mode_text\n\
float64 moved\n\
Pose2D position\n\
string robot_name\n\
string session_id\n\
string software_version\n\
uint8 state_id\n\
string state_text\n\
int32 uptime\n\
Twist2D velocity\n\
mir_msgs/UserPrompt user_prompt\n\
\n\
================================================================================\n\
MSG: mir_msgs/Error\n\
# Definition of offsets indicating what type an error is\n\
int32 HARDWARE_ERROR = 0\n\
int32 CPU_LOAD_ERROR = 100\n\
int32 MEMORY_ERROR = 200\n\
int32 ETHERNET_ERROR = 300\n\
int32 HDD_ERROR = 400\n\
int32 BATTERY_ERROR = 500\n\
int32 IMU_ERROR = 600\n\
int32 MOTOR_ERROR = 700\n\
int32 LASER_ERROR = 800\n\
int32 CAMERA_ERROR = 900\n\
int32 SAFETY_SYSTEM_ERROR = 1000\n\
int32 HOOK_ERROR = 5000\n\
int32 HOOK_CAMERA_ERROR = 5100\n\
int32 HOOK_ACTUATOR_ERROR = 5200\n\
int32 HOOK_BRAKE_ERROR = 5300\n\
int32 HOOK_ENCODER_ERROR = 5400\n\
int32 MISSING_ERROR = 9000\n\
int32 SOFTWARE_ERROR = 10000\n\
int32 MISSION_ERROR = 10100\n\
int32 LOCALIZATION_ERROR = 10200\n\
int32 MAPPING_ERROR = 10300\n\
int32 ODOM_FUSION_ERROR = 10400\n\
\n\
\n\
time timestamp		# Timestamp for when the error occurred\n\
int32 code 			# Error code\n\
string description 	# Error description\n\
string module		# Module in which the error occurred\n\
\n\
================================================================================\n\
MSG: mir_msgs/HookStatus\n\
bool available\n\
float32 length\n\
float32 height\n\
float32 angle\n\
bool braked\n\
\n\
bool trolley_attached\n\
Trolley trolley\n\
\n\
================================================================================\n\
MSG: mir_msgs/Trolley\n\
int32 id\n\
float32 length\n\
float32 width\n\
float32 height\n\
float32 offset_locked_wheels\n\
\n\
================================================================================\n\
MSG: mir_msgs/Pose2D\n\
float32 x\n\
float32 y\n\
float32 orientation\n\
\n\
================================================================================\n\
MSG: mir_msgs/Twist2D\n\
float32 linear\n\
float32 angular\n\
\n\
================================================================================\n\
MSG: mir_msgs/UserPrompt\n\
bool has_request\n\
string guid\n\
string user_group\n\
string question\n\
string[] options\n\
duration timeout\n\
";
  }

  static const char* value(const ::mir_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::RobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_percentage);
      stream.next(m.battery_time_remaining);
      stream.next(m.battery_voltage);
      stream.next(m.distance_to_next_target);
      stream.next(m.errors);
      stream.next(m.footprint);
      stream.next(m.hook_status);
      stream.next(m.map_id);
      stream.next(m.unloaded_map_changes);
      stream.next(m.mission_queue_id);
      stream.next(m.mission_text);
      stream.next(m.mode_id);
      stream.next(m.mode_text);
      stream.next(m.moved);
      stream.next(m.position);
      stream.next(m.robot_name);
      stream.next(m.session_id);
      stream.next(m.software_version);
      stream.next(m.state_id);
      stream.next(m.state_text);
      stream.next(m.uptime);
      stream.next(m.velocity);
      stream.next(m.user_prompt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::RobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "battery_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_percentage);
    s << indent << "battery_time_remaining: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_time_remaining);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "distance_to_next_target: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_next_target);
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mir_msgs::Error_<ContainerAllocator> >::stream(s, indent + "    ", v.errors[i]);
    }
    s << indent << "footprint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.footprint);
    s << indent << "hook_status: ";
    s << std::endl;
    Printer< ::mir_msgs::HookStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.hook_status);
    s << indent << "map_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_id);
    s << indent << "unloaded_map_changes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unloaded_map_changes);
    s << indent << "mission_queue_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission_queue_id);
    s << indent << "mission_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_text);
    s << indent << "mode_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode_id);
    s << indent << "mode_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode_text);
    s << indent << "moved: ";
    Printer<double>::stream(s, indent + "  ", v.moved);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::mir_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "session_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.session_id);
    s << indent << "software_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.software_version);
    s << indent << "state_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state_id);
    s << indent << "state_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_text);
    s << indent << "uptime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uptime);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::mir_msgs::Twist2D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "user_prompt: ";
    s << std::endl;
    Printer< ::mir_msgs::UserPrompt_<ContainerAllocator> >::stream(s, indent + "  ", v.user_prompt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_ROBOTSTATUS_H
