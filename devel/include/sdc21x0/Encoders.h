// Generated by gencpp from file sdc21x0/Encoders.msg
// DO NOT EDIT!


#ifndef SDC21X0_MESSAGE_ENCODERS_H
#define SDC21X0_MESSAGE_ENCODERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdc21x0
{
template <class ContainerAllocator>
struct Encoders_
{
  typedef Encoders_<ContainerAllocator> Type;

  Encoders_()
    : time_delta(0.0)
    , left_wheel(0)
    , right_wheel(0)  {
    }
  Encoders_(const ContainerAllocator& _alloc)
    : time_delta(0.0)
    , left_wheel(0)
    , right_wheel(0)  {
  (void)_alloc;
    }



   typedef float _time_delta_type;
  _time_delta_type time_delta;

   typedef int32_t _left_wheel_type;
  _left_wheel_type left_wheel;

   typedef int32_t _right_wheel_type;
  _right_wheel_type right_wheel;





  typedef boost::shared_ptr< ::sdc21x0::Encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdc21x0::Encoders_<ContainerAllocator> const> ConstPtr;

}; // struct Encoders_

typedef ::sdc21x0::Encoders_<std::allocator<void> > Encoders;

typedef boost::shared_ptr< ::sdc21x0::Encoders > EncodersPtr;
typedef boost::shared_ptr< ::sdc21x0::Encoders const> EncodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdc21x0::Encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdc21x0::Encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sdc21x0

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sdc21x0': ['/home/ros/MiR_ws/src/mir_robot/sdc21x0/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sdc21x0::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdc21x0::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdc21x0::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdc21x0::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdc21x0::Encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdc21x0::Encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdc21x0::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "265d820a2b35c4bff51c4a1d293ad5c0";
  }

  static const char* value(const ::sdc21x0::Encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x265d820a2b35c4bfULL;
  static const uint64_t static_value2 = 0xf51c4a1d293ad5c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdc21x0::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdc21x0/Encoders";
  }

  static const char* value(const ::sdc21x0::Encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdc21x0::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time_delta # Time since last encoder update.\n\
int32 left_wheel  # Encoder counts (absolute or relative)\n\
int32 right_wheel # Encoder counts (absolute or relative)\n\
";
  }

  static const char* value(const ::sdc21x0::Encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdc21x0::Encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_delta);
      stream.next(m.left_wheel);
      stream.next(m.right_wheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdc21x0::Encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdc21x0::Encoders_<ContainerAllocator>& v)
  {
    s << indent << "time_delta: ";
    Printer<float>::stream(s, indent + "  ", v.time_delta);
    s << indent << "left_wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_wheel);
    s << indent << "right_wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_wheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDC21X0_MESSAGE_ENCODERS_H
