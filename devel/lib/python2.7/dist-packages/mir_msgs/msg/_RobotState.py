# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/RobotState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotState(genpy.Message):
  _md5sum = "e9944ef1184bc5d5298157a9fe91aa4e"
  _type = "mir_msgs/RobotState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The robot has to be in a predefined state 
uint8 ROBOT_STATE_NONE = 0
uint8 ROBOT_STATE_STARTING = 1
uint8 ROBOT_STATE_SHUTTINGDOWN = 2
uint8 ROBOT_STATE_READY = 3		# ready to execute
uint8 ROBOT_STATE_PAUSE = 4		# pause from executing
uint8 ROBOT_STATE_EXECUTING = 5		# when running in mission/taxa/bus
uint8 ROBOT_STATE_ABORTED = 6	
uint8 ROBOT_STATE_COMPLETED = 7		# done executing
uint8 ROBOT_STATE_DOCKED = 8		# in the dock and charging the batteries
uint8 ROBOT_STATE_DOCKING = 9
uint8 ROBOT_STATE_EMERGENCYSTOP = 10	# the robot has emg-stop activated
uint8 ROBOT_STATE_MANUALCONTROL = 11	# a pause state, where the robot can move
uint8 ROBOT_STATE_ERROR = 12		# a general error state, requires a error handle

uint8 robotState
string robotStateString

"""
  # Pseudo-constants
  ROBOT_STATE_NONE = 0
  ROBOT_STATE_STARTING = 1
  ROBOT_STATE_SHUTTINGDOWN = 2
  ROBOT_STATE_READY = 3
  ROBOT_STATE_PAUSE = 4
  ROBOT_STATE_EXECUTING = 5
  ROBOT_STATE_ABORTED = 6
  ROBOT_STATE_COMPLETED = 7
  ROBOT_STATE_DOCKED = 8
  ROBOT_STATE_DOCKING = 9
  ROBOT_STATE_EMERGENCYSTOP = 10
  ROBOT_STATE_MANUALCONTROL = 11
  ROBOT_STATE_ERROR = 12

  __slots__ = ['robotState','robotStateString']
  _slot_types = ['uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robotState,robotStateString

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robotState is None:
        self.robotState = 0
      if self.robotStateString is None:
        self.robotStateString = ''
    else:
      self.robotState = 0
      self.robotStateString = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.robotState))
      _x = self.robotStateString
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.robotState,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotStateString = str[start:end].decode('utf-8')
      else:
        self.robotStateString = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.robotState))
      _x = self.robotStateString
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.robotState,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotStateString = str[start:end].decode('utf-8')
      else:
        self.robotStateString = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
