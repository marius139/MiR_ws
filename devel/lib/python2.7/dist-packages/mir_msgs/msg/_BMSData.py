# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/BMSData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BMSData(genpy.Message):
  _md5sum = "d493696478cec84b48f8cbfeb3941739"
  _type = "mir_msgs/BMSData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pack_voltage
float64 charge_current
float64 discharge_current
int32 state_of_charge
float64 remaining_time_to_full_charge
int32 remaining_capacity
int32 state_of_health
int32 DISCHARGING=1
int32 CHARGING=2
int32 status_flags
int32 temperature
uint32[] cell_voltage # In Mk2 robots and above the BMS provides data for 8 battery cells. MiR500 robots have BMS for 13 battery cells

float64 last_battery_msg_time"""
  # Pseudo-constants
  DISCHARGING = 1
  CHARGING = 2

  __slots__ = ['pack_voltage','charge_current','discharge_current','state_of_charge','remaining_time_to_full_charge','remaining_capacity','state_of_health','status_flags','temperature','cell_voltage','last_battery_msg_time']
  _slot_types = ['float64','float64','float64','int32','float64','int32','int32','int32','int32','uint32[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pack_voltage,charge_current,discharge_current,state_of_charge,remaining_time_to_full_charge,remaining_capacity,state_of_health,status_flags,temperature,cell_voltage,last_battery_msg_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BMSData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pack_voltage is None:
        self.pack_voltage = 0.
      if self.charge_current is None:
        self.charge_current = 0.
      if self.discharge_current is None:
        self.discharge_current = 0.
      if self.state_of_charge is None:
        self.state_of_charge = 0
      if self.remaining_time_to_full_charge is None:
        self.remaining_time_to_full_charge = 0.
      if self.remaining_capacity is None:
        self.remaining_capacity = 0
      if self.state_of_health is None:
        self.state_of_health = 0
      if self.status_flags is None:
        self.status_flags = 0
      if self.temperature is None:
        self.temperature = 0
      if self.cell_voltage is None:
        self.cell_voltage = []
      if self.last_battery_msg_time is None:
        self.last_battery_msg_time = 0.
    else:
      self.pack_voltage = 0.
      self.charge_current = 0.
      self.discharge_current = 0.
      self.state_of_charge = 0
      self.remaining_time_to_full_charge = 0.
      self.remaining_capacity = 0
      self.state_of_health = 0
      self.status_flags = 0
      self.temperature = 0
      self.cell_voltage = []
      self.last_battery_msg_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3did4i().pack(_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.cell_voltage))
      buff.write(_get_struct_d().pack(self.last_battery_msg_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature,) = _get_struct_3did4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.cell_voltage = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.last_battery_msg_time,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3did4i().pack(_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.cell_voltage.tostring())
      buff.write(_get_struct_d().pack(self.last_battery_msg_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature,) = _get_struct_3did4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.cell_voltage = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.last_battery_msg_time,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3did4i = None
def _get_struct_3did4i():
    global _struct_3did4i
    if _struct_3did4i is None:
        _struct_3did4i = struct.Struct("<3did4i")
    return _struct_3did4i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
