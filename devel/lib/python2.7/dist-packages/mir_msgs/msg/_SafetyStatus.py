# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/SafetyStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyStatus(genpy.Message):
  _md5sum = "785ce55b5098efd15a400a9dabaf908f"
  _type = "mir_msgs/SafetyStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool is_connected

bool is_firmware_ok
int32 firmware_version

bool in_protective_stop
bool in_emergency_stop
bool sto_feedback
bool is_restart_required

bool is_safety_muted
bool is_limited_speed_active
bool in_sleep_mode

bool in_manual_mode
bool is_manual_mode_restart_required"""
  __slots__ = ['is_connected','is_firmware_ok','firmware_version','in_protective_stop','in_emergency_stop','sto_feedback','is_restart_required','is_safety_muted','is_limited_speed_active','in_sleep_mode','in_manual_mode','is_manual_mode_restart_required']
  _slot_types = ['bool','bool','int32','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_connected,is_firmware_ok,firmware_version,in_protective_stop,in_emergency_stop,sto_feedback,is_restart_required,is_safety_muted,is_limited_speed_active,in_sleep_mode,in_manual_mode,is_manual_mode_restart_required

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_connected is None:
        self.is_connected = False
      if self.is_firmware_ok is None:
        self.is_firmware_ok = False
      if self.firmware_version is None:
        self.firmware_version = 0
      if self.in_protective_stop is None:
        self.in_protective_stop = False
      if self.in_emergency_stop is None:
        self.in_emergency_stop = False
      if self.sto_feedback is None:
        self.sto_feedback = False
      if self.is_restart_required is None:
        self.is_restart_required = False
      if self.is_safety_muted is None:
        self.is_safety_muted = False
      if self.is_limited_speed_active is None:
        self.is_limited_speed_active = False
      if self.in_sleep_mode is None:
        self.in_sleep_mode = False
      if self.in_manual_mode is None:
        self.in_manual_mode = False
      if self.is_manual_mode_restart_required is None:
        self.is_manual_mode_restart_required = False
    else:
      self.is_connected = False
      self.is_firmware_ok = False
      self.firmware_version = 0
      self.in_protective_stop = False
      self.in_emergency_stop = False
      self.sto_feedback = False
      self.is_restart_required = False
      self.is_safety_muted = False
      self.is_limited_speed_active = False
      self.in_sleep_mode = False
      self.in_manual_mode = False
      self.is_manual_mode_restart_required = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi9B().pack(_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.is_limited_speed_active, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.is_limited_speed_active, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required,) = _get_struct_2Bi9B().unpack(str[start:end])
      self.is_connected = bool(self.is_connected)
      self.is_firmware_ok = bool(self.is_firmware_ok)
      self.in_protective_stop = bool(self.in_protective_stop)
      self.in_emergency_stop = bool(self.in_emergency_stop)
      self.sto_feedback = bool(self.sto_feedback)
      self.is_restart_required = bool(self.is_restart_required)
      self.is_safety_muted = bool(self.is_safety_muted)
      self.is_limited_speed_active = bool(self.is_limited_speed_active)
      self.in_sleep_mode = bool(self.in_sleep_mode)
      self.in_manual_mode = bool(self.in_manual_mode)
      self.is_manual_mode_restart_required = bool(self.is_manual_mode_restart_required)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi9B().pack(_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.is_limited_speed_active, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.is_limited_speed_active, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required,) = _get_struct_2Bi9B().unpack(str[start:end])
      self.is_connected = bool(self.is_connected)
      self.is_firmware_ok = bool(self.is_firmware_ok)
      self.in_protective_stop = bool(self.in_protective_stop)
      self.in_emergency_stop = bool(self.in_emergency_stop)
      self.sto_feedback = bool(self.sto_feedback)
      self.is_restart_required = bool(self.is_restart_required)
      self.is_safety_muted = bool(self.is_safety_muted)
      self.is_limited_speed_active = bool(self.is_limited_speed_active)
      self.in_sleep_mode = bool(self.in_sleep_mode)
      self.in_manual_mode = bool(self.in_manual_mode)
      self.is_manual_mode_restart_required = bool(self.is_manual_mode_restart_required)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bi9B = None
def _get_struct_2Bi9B():
    global _struct_2Bi9B
    if _struct_2Bi9B is None:
        _struct_2Bi9B = struct.Struct("<2Bi9B")
    return _struct_2Bi9B
