# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/MirStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MirStatus(genpy.Message):
  _md5sum = "67e1f2c3710bfe1130e859b6c4f4e0c2"
  _type = "mir_msgs/MirStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# MirStatus - to publish data on a topic
int32  state    			# system state
string  mode    			# overall operation of the robot
string  msg     			# status message
float32 uptime  			# time since start in min
float32 moved   			# combined distance moved since last start
float32 battery 			# voltage of battery
float32 battery_percentage 		# battery left in percent
int32 battery_time_left 		# battery time left in seconds
float32 eta     			# estimated time of arrival (not impl)
"""
  __slots__ = ['state','mode','msg','uptime','moved','battery','battery_percentage','battery_time_left','eta']
  _slot_types = ['int32','string','string','float32','float32','float32','float32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,mode,msg,uptime,moved,battery,battery_percentage,battery_time_left,eta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MirStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.mode is None:
        self.mode = ''
      if self.msg is None:
        self.msg = ''
      if self.uptime is None:
        self.uptime = 0.
      if self.moved is None:
        self.moved = 0.
      if self.battery is None:
        self.battery = 0.
      if self.battery_percentage is None:
        self.battery_percentage = 0.
      if self.battery_time_left is None:
        self.battery_time_left = 0
      if self.eta is None:
        self.eta = 0.
    else:
      self.state = 0
      self.mode = ''
      self.msg = ''
      self.uptime = 0.
      self.moved = 0.
      self.battery = 0.
      self.battery_percentage = 0.
      self.battery_time_left = 0
      self.eta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.state))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4fif().pack(_x.uptime, _x.moved, _x.battery, _x.battery_percentage, _x.battery_time_left, _x.eta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.state,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.uptime, _x.moved, _x.battery, _x.battery_percentage, _x.battery_time_left, _x.eta,) = _get_struct_4fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.state))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4fif().pack(_x.uptime, _x.moved, _x.battery, _x.battery_percentage, _x.battery_time_left, _x.eta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.state,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.uptime, _x.moved, _x.battery, _x.battery_percentage, _x.battery_time_left, _x.eta,) = _get_struct_4fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_4fif = None
def _get_struct_4fif():
    global _struct_4fif
    if _struct_4fif is None:
        _struct_4fif = struct.Struct("<4fif")
    return _struct_4fif
