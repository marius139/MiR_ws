# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/WorldModel.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mir_msgs.msg
import std_msgs.msg

class WorldModel(genpy.Message):
  _md5sum = "08874a9d91b8995bca1260d0f250c218"
  _type = "mir_msgs/WorldModel"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
mir_msgs/WorldMap[] world_map # world model for a particular map
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: mir_msgs/WorldMap
mir_msgs/ResourcesState positions
mir_msgs/ResourcesState areas
mir_msgs/ExternalRobots robots
int32 map_id
================================================================================
MSG: mir_msgs/ResourcesState
Header header
ResourceState[] resources
================================================================================
MSG: mir_msgs/ResourceState
string[] assigned # A token that is true whenever the resource is busy.
uint32 ROBOT_POSITION=0 
uint32 STAGING_POSITION=1
uint32 CHARGING_STATION=2
uint32 AREA=3
uint32 type # The resource type
uint32 path_idx # The index from the global path in which the robot gets into the position
float32 distance # The distance from the robot to the resource
geometry_msgs/Point collision_point # The collision point with the resource 
string[] queue # The queue for a resource. It's a list of robots ips.
string name # The name of the resource
string guid # The guid of the resource

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: mir_msgs/ExternalRobots
Header header
mir_msgs/ExternalRobot[] robots

================================================================================
MSG: mir_msgs/ExternalRobot
Header header
uint32 id
string name
string footprint
string ip
uint32 map_id
int32 priority
geometry_msgs/Pose pose
geometry_msgs/Pose extrapolated_pose
geometry_msgs/Twist twist

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','world_map']
  _slot_types = ['std_msgs/Header','mir_msgs/WorldMap[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,world_map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WorldModel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.world_map is None:
        self.world_map = []
    else:
      self.header = std_msgs.msg.Header()
      self.world_map = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.world_map)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_map:
        _v1 = val1.positions
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v1.resources)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.resources:
          length = len(val3.assigned)
          buff.write(_struct_I.pack(length))
          for val4 in val3.assigned:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3
          buff.write(_get_struct_2If().pack(_x.type, _x.path_idx, _x.distance))
          _v4 = val3.collision_point
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.queue)
          buff.write(_struct_I.pack(length))
          for val4 in val3.queue:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.guid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.areas
        _v6 = _v5.header
        buff.write(_get_struct_I().pack(_v6.seq))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v5.resources)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.resources:
          length = len(val3.assigned)
          buff.write(_struct_I.pack(length))
          for val4 in val3.assigned:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3
          buff.write(_get_struct_2If().pack(_x.type, _x.path_idx, _x.distance))
          _v8 = val3.collision_point
          _x = _v8
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.queue)
          buff.write(_struct_I.pack(length))
          for val4 in val3.queue:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.guid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = val1.robots
        _v10 = _v9.header
        buff.write(_get_struct_I().pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v9.robots)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.robots:
          _v12 = val3.header
          buff.write(_get_struct_I().pack(_v12.seq))
          _v13 = _v12.stamp
          _x = _v13
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v12.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_I().pack(val3.id))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.footprint
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ip
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_Ii().pack(_x.map_id, _x.priority))
          _v14 = val3.pose
          _v15 = _v14.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = _v14.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v17 = val3.extrapolated_pose
          _v18 = _v17.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = _v17.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v20 = val3.twist
          _v21 = _v20.linear
          _x = _v21
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v22 = _v20.angular
          _x = _v22
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(val1.map_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.world_map is None:
        self.world_map = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_map = []
      for i in range(0, length):
        val1 = mir_msgs.msg.WorldMap()
        _v23 = val1.positions
        _v24 = _v23.header
        start = end
        end += 4
        (_v24.seq,) = _get_struct_I().unpack(str[start:end])
        _v25 = _v24.stamp
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.frame_id = str[start:end].decode('utf-8')
        else:
          _v24.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.resources = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ResourceState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.assigned = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.assigned.append(val4)
          _x = val3
          start = end
          end += 12
          (_x.type, _x.path_idx, _x.distance,) = _get_struct_2If().unpack(str[start:end])
          _v26 = val3.collision_point
          _x = _v26
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.queue = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.queue.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.guid = str[start:end].decode('utf-8')
          else:
            val3.guid = str[start:end]
          _v23.resources.append(val3)
        _v27 = val1.areas
        _v28 = _v27.header
        start = end
        end += 4
        (_v28.seq,) = _get_struct_I().unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8')
        else:
          _v28.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.resources = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ResourceState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.assigned = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.assigned.append(val4)
          _x = val3
          start = end
          end += 12
          (_x.type, _x.path_idx, _x.distance,) = _get_struct_2If().unpack(str[start:end])
          _v30 = val3.collision_point
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.queue = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.queue.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.guid = str[start:end].decode('utf-8')
          else:
            val3.guid = str[start:end]
          _v27.resources.append(val3)
        _v31 = val1.robots
        _v32 = _v31.header
        start = end
        end += 4
        (_v32.seq,) = _get_struct_I().unpack(str[start:end])
        _v33 = _v32.stamp
        _x = _v33
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_id = str[start:end].decode('utf-8')
        else:
          _v32.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.robots = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ExternalRobot()
          _v34 = val3.header
          start = end
          end += 4
          (_v34.seq,) = _get_struct_I().unpack(str[start:end])
          _v35 = _v34.stamp
          _x = _v35
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v34.frame_id = str[start:end].decode('utf-8')
          else:
            _v34.frame_id = str[start:end]
          start = end
          end += 4
          (val3.id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.footprint = str[start:end].decode('utf-8')
          else:
            val3.footprint = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ip = str[start:end].decode('utf-8')
          else:
            val3.ip = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.map_id, _x.priority,) = _get_struct_Ii().unpack(str[start:end])
          _v36 = val3.pose
          _v37 = _v36.position
          _x = _v37
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v38 = _v36.orientation
          _x = _v38
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v39 = val3.extrapolated_pose
          _v40 = _v39.position
          _x = _v40
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v41 = _v39.orientation
          _x = _v41
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v42 = val3.twist
          _v43 = _v42.linear
          _x = _v43
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v44 = _v42.angular
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31.robots.append(val3)
        start = end
        end += 4
        (val1.map_id,) = _get_struct_i().unpack(str[start:end])
        self.world_map.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.world_map)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_map:
        _v45 = val1.positions
        _v46 = _v45.header
        buff.write(_get_struct_I().pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v45.resources)
        buff.write(_struct_I.pack(length))
        for val3 in _v45.resources:
          length = len(val3.assigned)
          buff.write(_struct_I.pack(length))
          for val4 in val3.assigned:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3
          buff.write(_get_struct_2If().pack(_x.type, _x.path_idx, _x.distance))
          _v48 = val3.collision_point
          _x = _v48
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.queue)
          buff.write(_struct_I.pack(length))
          for val4 in val3.queue:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.guid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v49 = val1.areas
        _v50 = _v49.header
        buff.write(_get_struct_I().pack(_v50.seq))
        _v51 = _v50.stamp
        _x = _v51
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v50.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v49.resources)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.resources:
          length = len(val3.assigned)
          buff.write(_struct_I.pack(length))
          for val4 in val3.assigned:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3
          buff.write(_get_struct_2If().pack(_x.type, _x.path_idx, _x.distance))
          _v52 = val3.collision_point
          _x = _v52
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.queue)
          buff.write(_struct_I.pack(length))
          for val4 in val3.queue:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.guid
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v53 = val1.robots
        _v54 = _v53.header
        buff.write(_get_struct_I().pack(_v54.seq))
        _v55 = _v54.stamp
        _x = _v55
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v54.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v53.robots)
        buff.write(_struct_I.pack(length))
        for val3 in _v53.robots:
          _v56 = val3.header
          buff.write(_get_struct_I().pack(_v56.seq))
          _v57 = _v56.stamp
          _x = _v57
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v56.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_I().pack(val3.id))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.footprint
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.ip
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_Ii().pack(_x.map_id, _x.priority))
          _v58 = val3.pose
          _v59 = _v58.position
          _x = _v59
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v60 = _v58.orientation
          _x = _v60
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v61 = val3.extrapolated_pose
          _v62 = _v61.position
          _x = _v62
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v63 = _v61.orientation
          _x = _v63
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v64 = val3.twist
          _v65 = _v64.linear
          _x = _v65
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v66 = _v64.angular
          _x = _v66
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(val1.map_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.world_map is None:
        self.world_map = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_map = []
      for i in range(0, length):
        val1 = mir_msgs.msg.WorldMap()
        _v67 = val1.positions
        _v68 = _v67.header
        start = end
        end += 4
        (_v68.seq,) = _get_struct_I().unpack(str[start:end])
        _v69 = _v68.stamp
        _x = _v69
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v68.frame_id = str[start:end].decode('utf-8')
        else:
          _v68.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v67.resources = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ResourceState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.assigned = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.assigned.append(val4)
          _x = val3
          start = end
          end += 12
          (_x.type, _x.path_idx, _x.distance,) = _get_struct_2If().unpack(str[start:end])
          _v70 = val3.collision_point
          _x = _v70
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.queue = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.queue.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.guid = str[start:end].decode('utf-8')
          else:
            val3.guid = str[start:end]
          _v67.resources.append(val3)
        _v71 = val1.areas
        _v72 = _v71.header
        start = end
        end += 4
        (_v72.seq,) = _get_struct_I().unpack(str[start:end])
        _v73 = _v72.stamp
        _x = _v73
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v72.frame_id = str[start:end].decode('utf-8')
        else:
          _v72.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v71.resources = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ResourceState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.assigned = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.assigned.append(val4)
          _x = val3
          start = end
          end += 12
          (_x.type, _x.path_idx, _x.distance,) = _get_struct_2If().unpack(str[start:end])
          _v74 = val3.collision_point
          _x = _v74
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.queue = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            val3.queue.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.guid = str[start:end].decode('utf-8')
          else:
            val3.guid = str[start:end]
          _v71.resources.append(val3)
        _v75 = val1.robots
        _v76 = _v75.header
        start = end
        end += 4
        (_v76.seq,) = _get_struct_I().unpack(str[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v76.frame_id = str[start:end].decode('utf-8')
        else:
          _v76.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v75.robots = []
        for i in range(0, length):
          val3 = mir_msgs.msg.ExternalRobot()
          _v78 = val3.header
          start = end
          end += 4
          (_v78.seq,) = _get_struct_I().unpack(str[start:end])
          _v79 = _v78.stamp
          _x = _v79
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v78.frame_id = str[start:end].decode('utf-8')
          else:
            _v78.frame_id = str[start:end]
          start = end
          end += 4
          (val3.id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.footprint = str[start:end].decode('utf-8')
          else:
            val3.footprint = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ip = str[start:end].decode('utf-8')
          else:
            val3.ip = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.map_id, _x.priority,) = _get_struct_Ii().unpack(str[start:end])
          _v80 = val3.pose
          _v81 = _v80.position
          _x = _v81
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v82 = _v80.orientation
          _x = _v82
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v83 = val3.extrapolated_pose
          _v84 = _v83.position
          _x = _v84
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v85 = _v83.orientation
          _x = _v85
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v86 = val3.twist
          _v87 = _v86.linear
          _x = _v87
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v88 = _v86.angular
          _x = _v88
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v75.robots.append(val3)
        start = end
        end += 4
        (val1.map_id,) = _get_struct_i().unpack(str[start:end])
        self.world_map.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Ii = None
def _get_struct_Ii():
    global _struct_Ii
    if _struct_Ii is None:
        _struct_Ii = struct.Struct("<Ii")
    return _struct_Ii
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
