# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/ChargingState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ChargingState(genpy.Message):
  _md5sum = "1393c08007cacc5b837577273ba19ce7"
  _type = "mir_msgs/ChargingState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool charging_relay
float64 charging_current
uint32 charging_current_raw
float64 last_time_current

float64 charging_voltage
uint32 charging_voltage_raw
bool is_voltage_low
float64 last_time_voltage

"""
  __slots__ = ['charging_relay','charging_current','charging_current_raw','last_time_current','charging_voltage','charging_voltage_raw','is_voltage_low','last_time_voltage']
  _slot_types = ['bool','float64','uint32','float64','float64','uint32','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       charging_relay,charging_current,charging_current_raw,last_time_current,charging_voltage,charging_voltage_raw,is_voltage_low,last_time_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChargingState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.charging_relay is None:
        self.charging_relay = False
      if self.charging_current is None:
        self.charging_current = 0.
      if self.charging_current_raw is None:
        self.charging_current_raw = 0
      if self.last_time_current is None:
        self.last_time_current = 0.
      if self.charging_voltage is None:
        self.charging_voltage = 0.
      if self.charging_voltage_raw is None:
        self.charging_voltage_raw = 0
      if self.is_voltage_low is None:
        self.is_voltage_low = False
      if self.last_time_voltage is None:
        self.last_time_voltage = 0.
    else:
      self.charging_relay = False
      self.charging_current = 0.
      self.charging_current_raw = 0
      self.last_time_current = 0.
      self.charging_voltage = 0.
      self.charging_voltage_raw = 0
      self.is_voltage_low = False
      self.last_time_voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BdI2dIBd().pack(_x.charging_relay, _x.charging_current, _x.charging_current_raw, _x.last_time_current, _x.charging_voltage, _x.charging_voltage_raw, _x.is_voltage_low, _x.last_time_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.charging_relay, _x.charging_current, _x.charging_current_raw, _x.last_time_current, _x.charging_voltage, _x.charging_voltage_raw, _x.is_voltage_low, _x.last_time_voltage,) = _get_struct_BdI2dIBd().unpack(str[start:end])
      self.charging_relay = bool(self.charging_relay)
      self.is_voltage_low = bool(self.is_voltage_low)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BdI2dIBd().pack(_x.charging_relay, _x.charging_current, _x.charging_current_raw, _x.last_time_current, _x.charging_voltage, _x.charging_voltage_raw, _x.is_voltage_low, _x.last_time_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.charging_relay, _x.charging_current, _x.charging_current_raw, _x.last_time_current, _x.charging_voltage, _x.charging_voltage_raw, _x.is_voltage_low, _x.last_time_voltage,) = _get_struct_BdI2dIBd().unpack(str[start:end])
      self.charging_relay = bool(self.charging_relay)
      self.is_voltage_low = bool(self.is_voltage_low)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BdI2dIBd = None
def _get_struct_BdI2dIBd():
    global _struct_BdI2dIBd
    if _struct_BdI2dIBd is None:
        _struct_BdI2dIBd = struct.Struct("<BdI2dIBd")
    return _struct_BdI2dIBd
