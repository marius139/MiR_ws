# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_actions/RelativeMoveGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class RelativeMoveGoal(genpy.Message):
  _md5sum = "ceef9ff5cf266b0a2f52eea13fa5ba8a"
  _type = "mir_actions/RelativeMoveGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
geometry_msgs/PoseStamped target_pose
float64 yaw
bool collision_detection
float64 disable_collision_check_dist
float64 max_linear_speed
float64 max_rotational_speed
float64 pid_dist_offset
float64 target_offset
bool only_collision_detection
float64 timeout
bool same_goal

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['target_pose','yaw','collision_detection','disable_collision_check_dist','max_linear_speed','max_rotational_speed','pid_dist_offset','target_offset','only_collision_detection','timeout','same_goal']
  _slot_types = ['geometry_msgs/PoseStamped','float64','bool','float64','float64','float64','float64','float64','bool','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_pose,yaw,collision_detection,disable_collision_check_dist,max_linear_speed,max_rotational_speed,pid_dist_offset,target_offset,only_collision_detection,timeout,same_goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelativeMoveGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.PoseStamped()
      if self.yaw is None:
        self.yaw = 0.
      if self.collision_detection is None:
        self.collision_detection = False
      if self.disable_collision_check_dist is None:
        self.disable_collision_check_dist = 0.
      if self.max_linear_speed is None:
        self.max_linear_speed = 0.
      if self.max_rotational_speed is None:
        self.max_rotational_speed = 0.
      if self.pid_dist_offset is None:
        self.pid_dist_offset = 0.
      if self.target_offset is None:
        self.target_offset = 0.
      if self.only_collision_detection is None:
        self.only_collision_detection = False
      if self.timeout is None:
        self.timeout = 0.
      if self.same_goal is None:
        self.same_goal = False
    else:
      self.target_pose = geometry_msgs.msg.PoseStamped()
      self.yaw = 0.
      self.collision_detection = False
      self.disable_collision_check_dist = 0.
      self.max_linear_speed = 0.
      self.max_rotational_speed = 0.
      self.pid_dist_offset = 0.
      self.target_offset = 0.
      self.only_collision_detection = False
      self.timeout = 0.
      self.same_goal = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.target_pose.header.seq, _x.target_pose.header.stamp.secs, _x.target_pose.header.stamp.nsecs))
      _x = self.target_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8dB5dBdB().pack(_x.target_pose.pose.position.x, _x.target_pose.pose.position.y, _x.target_pose.pose.position.z, _x.target_pose.pose.orientation.x, _x.target_pose.pose.orientation.y, _x.target_pose.pose.orientation.z, _x.target_pose.pose.orientation.w, _x.yaw, _x.collision_detection, _x.disable_collision_check_dist, _x.max_linear_speed, _x.max_rotational_speed, _x.pid_dist_offset, _x.target_offset, _x.only_collision_detection, _x.timeout, _x.same_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.target_pose.header.seq, _x.target_pose.header.stamp.secs, _x.target_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.target_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.target_pose.pose.position.x, _x.target_pose.pose.position.y, _x.target_pose.pose.position.z, _x.target_pose.pose.orientation.x, _x.target_pose.pose.orientation.y, _x.target_pose.pose.orientation.z, _x.target_pose.pose.orientation.w, _x.yaw, _x.collision_detection, _x.disable_collision_check_dist, _x.max_linear_speed, _x.max_rotational_speed, _x.pid_dist_offset, _x.target_offset, _x.only_collision_detection, _x.timeout, _x.same_goal,) = _get_struct_8dB5dBdB().unpack(str[start:end])
      self.collision_detection = bool(self.collision_detection)
      self.only_collision_detection = bool(self.only_collision_detection)
      self.same_goal = bool(self.same_goal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.target_pose.header.seq, _x.target_pose.header.stamp.secs, _x.target_pose.header.stamp.nsecs))
      _x = self.target_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8dB5dBdB().pack(_x.target_pose.pose.position.x, _x.target_pose.pose.position.y, _x.target_pose.pose.position.z, _x.target_pose.pose.orientation.x, _x.target_pose.pose.orientation.y, _x.target_pose.pose.orientation.z, _x.target_pose.pose.orientation.w, _x.yaw, _x.collision_detection, _x.disable_collision_check_dist, _x.max_linear_speed, _x.max_rotational_speed, _x.pid_dist_offset, _x.target_offset, _x.only_collision_detection, _x.timeout, _x.same_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.target_pose.header.seq, _x.target_pose.header.stamp.secs, _x.target_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.target_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.target_pose.pose.position.x, _x.target_pose.pose.position.y, _x.target_pose.pose.position.z, _x.target_pose.pose.orientation.x, _x.target_pose.pose.orientation.y, _x.target_pose.pose.orientation.z, _x.target_pose.pose.orientation.w, _x.yaw, _x.collision_detection, _x.disable_collision_check_dist, _x.max_linear_speed, _x.max_rotational_speed, _x.pid_dist_offset, _x.target_offset, _x.only_collision_detection, _x.timeout, _x.same_goal,) = _get_struct_8dB5dBdB().unpack(str[start:end])
      self.collision_detection = bool(self.collision_detection)
      self.only_collision_detection = bool(self.only_collision_detection)
      self.same_goal = bool(self.same_goal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8dB5dBdB = None
def _get_struct_8dB5dBdB():
    global _struct_8dB5dBdB
    if _struct_8dB5dBdB is None:
        _struct_8dB5dBdB = struct.Struct("<8dB5dBdB")
    return _struct_8dB5dBdB
