// Auto-generated. Do not edit!

// (in-package mir_actions.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let nav_msgs = _finder('nav_msgs');
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class MirMoveBaseGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.target_pose = null;
      this.goal_dist_threshold = null;
      this.goal_orientation_threshold = null;
      this.path = null;
      this.max_plan_time = null;
      this.clear_costmaps = null;
    }
    else {
      if (initObj.hasOwnProperty('target_pose')) {
        this.target_pose = initObj.target_pose
      }
      else {
        this.target_pose = new geometry_msgs.msg.PoseStamped();
      }
      if (initObj.hasOwnProperty('goal_dist_threshold')) {
        this.goal_dist_threshold = initObj.goal_dist_threshold
      }
      else {
        this.goal_dist_threshold = 0.0;
      }
      if (initObj.hasOwnProperty('goal_orientation_threshold')) {
        this.goal_orientation_threshold = initObj.goal_orientation_threshold
      }
      else {
        this.goal_orientation_threshold = 0.0;
      }
      if (initObj.hasOwnProperty('path')) {
        this.path = initObj.path
      }
      else {
        this.path = new nav_msgs.msg.Path();
      }
      if (initObj.hasOwnProperty('max_plan_time')) {
        this.max_plan_time = initObj.max_plan_time
      }
      else {
        this.max_plan_time = 0.0;
      }
      if (initObj.hasOwnProperty('clear_costmaps')) {
        this.clear_costmaps = initObj.clear_costmaps
      }
      else {
        this.clear_costmaps = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MirMoveBaseGoal
    // Serialize message field [target_pose]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.target_pose, buffer, bufferOffset);
    // Serialize message field [goal_dist_threshold]
    bufferOffset = _serializer.float64(obj.goal_dist_threshold, buffer, bufferOffset);
    // Serialize message field [goal_orientation_threshold]
    bufferOffset = _serializer.float64(obj.goal_orientation_threshold, buffer, bufferOffset);
    // Serialize message field [path]
    bufferOffset = nav_msgs.msg.Path.serialize(obj.path, buffer, bufferOffset);
    // Serialize message field [max_plan_time]
    bufferOffset = _serializer.float32(obj.max_plan_time, buffer, bufferOffset);
    // Serialize message field [clear_costmaps]
    bufferOffset = _serializer.bool(obj.clear_costmaps, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MirMoveBaseGoal
    let len;
    let data = new MirMoveBaseGoal(null);
    // Deserialize message field [target_pose]
    data.target_pose = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal_dist_threshold]
    data.goal_dist_threshold = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [goal_orientation_threshold]
    data.goal_orientation_threshold = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [path]
    data.path = nav_msgs.msg.Path.deserialize(buffer, bufferOffset);
    // Deserialize message field [max_plan_time]
    data.max_plan_time = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [clear_costmaps]
    data.clear_costmaps = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.target_pose);
    length += nav_msgs.msg.Path.getMessageSize(object.path);
    return length + 21;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mir_actions/MirMoveBaseGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'b19f57a0f554e290b402dd0a4cdf6bf8';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    geometry_msgs/PoseStamped target_pose
    float64 goal_dist_threshold
    float64 goal_orientation_threshold
    nav_msgs/Path path
    float32 max_plan_time
    bool clear_costmaps
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: nav_msgs/Path
    #An array of poses that represents a Path for a robot to follow
    Header header
    geometry_msgs/PoseStamped[] poses
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MirMoveBaseGoal(null);
    if (msg.target_pose !== undefined) {
      resolved.target_pose = geometry_msgs.msg.PoseStamped.Resolve(msg.target_pose)
    }
    else {
      resolved.target_pose = new geometry_msgs.msg.PoseStamped()
    }

    if (msg.goal_dist_threshold !== undefined) {
      resolved.goal_dist_threshold = msg.goal_dist_threshold;
    }
    else {
      resolved.goal_dist_threshold = 0.0
    }

    if (msg.goal_orientation_threshold !== undefined) {
      resolved.goal_orientation_threshold = msg.goal_orientation_threshold;
    }
    else {
      resolved.goal_orientation_threshold = 0.0
    }

    if (msg.path !== undefined) {
      resolved.path = nav_msgs.msg.Path.Resolve(msg.path)
    }
    else {
      resolved.path = new nav_msgs.msg.Path()
    }

    if (msg.max_plan_time !== undefined) {
      resolved.max_plan_time = msg.max_plan_time;
    }
    else {
      resolved.max_plan_time = 0.0
    }

    if (msg.clear_costmaps !== undefined) {
      resolved.clear_costmaps = msg.clear_costmaps;
    }
    else {
      resolved.clear_costmaps = false
    }

    return resolved;
    }
};

module.exports = MirMoveBaseGoal;
