;; Auto-generated. Do not edit!


(when (boundp 'mir_actions::MirMoveBaseGoal)
  (if (not (find-package "MIR_ACTIONS"))
    (make-package "MIR_ACTIONS"))
  (shadow 'MirMoveBaseGoal (find-package "MIR_ACTIONS")))
(unless (find-package "MIR_ACTIONS::MIRMOVEBASEGOAL")
  (make-package "MIR_ACTIONS::MIRMOVEBASEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MirMoveBaseGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "NAV_MSGS"))
  (ros::roseus-add-msgs "nav_msgs"))


(defclass mir_actions::MirMoveBaseGoal
  :super ros::object
  :slots (_target_pose _goal_dist_threshold _goal_orientation_threshold _path _max_plan_time _clear_costmaps ))

(defmethod mir_actions::MirMoveBaseGoal
  (:init
   (&key
    ((:target_pose __target_pose) (instance geometry_msgs::PoseStamped :init))
    ((:goal_dist_threshold __goal_dist_threshold) 0.0)
    ((:goal_orientation_threshold __goal_orientation_threshold) 0.0)
    ((:path __path) (instance nav_msgs::Path :init))
    ((:max_plan_time __max_plan_time) 0.0)
    ((:clear_costmaps __clear_costmaps) nil)
    )
   (send-super :init)
   (setq _target_pose __target_pose)
   (setq _goal_dist_threshold (float __goal_dist_threshold))
   (setq _goal_orientation_threshold (float __goal_orientation_threshold))
   (setq _path __path)
   (setq _max_plan_time (float __max_plan_time))
   (setq _clear_costmaps __clear_costmaps)
   self)
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:goal_dist_threshold
   (&optional __goal_dist_threshold)
   (if __goal_dist_threshold (setq _goal_dist_threshold __goal_dist_threshold)) _goal_dist_threshold)
  (:goal_orientation_threshold
   (&optional __goal_orientation_threshold)
   (if __goal_orientation_threshold (setq _goal_orientation_threshold __goal_orientation_threshold)) _goal_orientation_threshold)
  (:path
   (&rest __path)
   (if (keywordp (car __path))
       (send* _path __path)
     (progn
       (if __path (setq _path (car __path)))
       _path)))
  (:max_plan_time
   (&optional __max_plan_time)
   (if __max_plan_time (setq _max_plan_time __max_plan_time)) _max_plan_time)
  (:clear_costmaps
   (&optional __clear_costmaps)
   (if __clear_costmaps (setq _clear_costmaps __clear_costmaps)) _clear_costmaps)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _target_pose
    (send _target_pose :serialization-length)
    ;; float64 _goal_dist_threshold
    8
    ;; float64 _goal_orientation_threshold
    8
    ;; nav_msgs/Path _path
    (send _path :serialization-length)
    ;; float32 _max_plan_time
    4
    ;; bool _clear_costmaps
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _target_pose
       (send _target_pose :serialize s)
     ;; float64 _goal_dist_threshold
       (sys::poke _goal_dist_threshold (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _goal_orientation_threshold
       (sys::poke _goal_orientation_threshold (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; nav_msgs/Path _path
       (send _path :serialize s)
     ;; float32 _max_plan_time
       (sys::poke _max_plan_time (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _clear_costmaps
       (if _clear_costmaps (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;; float64 _goal_dist_threshold
     (setq _goal_dist_threshold (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _goal_orientation_threshold
     (setq _goal_orientation_threshold (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; nav_msgs/Path _path
     (send _path :deserialize buf ptr-) (incf ptr- (send _path :serialization-length))
   ;; float32 _max_plan_time
     (setq _max_plan_time (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _clear_costmaps
     (setq _clear_costmaps (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get mir_actions::MirMoveBaseGoal :md5sum-) "b19f57a0f554e290b402dd0a4cdf6bf8")
(setf (get mir_actions::MirMoveBaseGoal :datatype-) "mir_actions/MirMoveBaseGoal")
(setf (get mir_actions::MirMoveBaseGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
geometry_msgs/PoseStamped target_pose
float64 goal_dist_threshold
float64 goal_orientation_threshold
nav_msgs/Path path
float32 max_plan_time
bool clear_costmaps

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

")



(provide :mir_actions/MirMoveBaseGoal "b19f57a0f554e290b402dd0a4cdf6bf8")


